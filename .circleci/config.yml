version: 2.1


commands:
  destroy-environment:
    description: Destroy back-end and front-end cloudformation stacks given a workflow ID.
    parameters:
      # Add parameter here   
    steps:
      - run:
          name: Destroy environments
          command: |
            aws s3 rm "s3://udapeople-${CIRCLE_WORKFLOW_ID}" --recursive
            aws cloudformation delete-stack --stack-name "udapeople-backend-${CIRCLE_WORKFLOW_ID}"
            aws cloudformation delete-stack --stack-name "udapeople-frontend-${CIRCLE_WORKFLOW_ID}"
            echo "deleted"
          when: on_fail

  revert-migrations:
    description: Revert the last migration if successfully run in the current workflow.
    parameters:
      # Add parameter here     
    steps:
      - run:
          name: Revert migrations
          # Add when this will run
          command: |
            SUCCESS = $(curl -H "token: ${CIRCLE_WORKFLOW_ID:0:7}" --request GET https://api.memstash.io/values/<< pipeline.id >>_migrations)
            if(( $SUCCESS==1 )); 
            then
              cd ~/project/backend
              npm install
              npm run migration:revert
            fi
          when: on_fail
jobs:
  build-frontend:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - run:
          name: Build application frontend
          command: |
            cd frontend
            npm i
            npm run build
      
            
  build-backend:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - run:
          name: Build application backend
          command: |
            cd backend
            npm i
            npm run build
      
          
  test-frontend:
    docker:
      # Docker image here
      - image: circleci/node:13.8.0
    steps:
      # Checkout code from git
      - checkout
      # Restore from cache
      - restore_cache:
          keys: [frontend-build]
      # Your job code here
      - run:
          name: frontend-end test
          command: |
             # Your code here
             cd frontend
             npm i
             npm run test
                
  test-backend:
    docker:
      # Docker image here
      - image: circleci/node:13.8.0
    steps:
      # Checkout code from git
      - checkout
      - restore_cache:
          keys: [backend-build]
      # Your job code here
      - run:
          name: backend-end test
          command: |
             # Your code here
             cd backend
             npm i
             npm run test

  scan-frontend:
    docker:
      # Docker image here
      - image: circleci/node:13.8.0
    steps:
      # Checkout code from git
      - checkout
      # Restore from cache
      - restore_cache:
          keys: [frontend-build]
      # Your job code here
      - run:
          name: frontend-end test
          command: |
             # Your code here
             cd frontend
             npm i
             # npm audit --audit-level=critical
             npm audit fix --audit-level=critical --force
    
  scan-backend:
    docker:
      # Docker image here
      - image: circleci/node:13.8.0
    steps:
      # Checkout code from git
      - checkout
      # Restore from cache
      - restore_cache:
          keys: [backend-build]
      # Your job code here
      - run:
          name: frontend-end test
          command: |
             # Your code here
             cd backend
             npm i
             # npm audit --audit-level=critical 
             npm audit fix --audit-level=critical --force
             
             
             
  deploy-infrastructure:
    docker:
      # Docker image here that supports AWS CLI
      - image: amazon/aws-cli
    steps:
      # Checkout code from git
      - checkout
      - run:
          name: Ensure back-end infrastructure exists
          command: |
            aws cloudformation deploy \
              --template-file .circleci/files/backend.yml \
              --tags project=udapeople \
              --stack-name "backendStack-${CIRCLE_WORKFLOW_ID}" \
              --parameter-overrides ID="${CIRCLE_WORKFLOW_ID}"  
            
      - run: yum -y install tar gzip
              
      - run:
          name: Ensure front-end infrastructure exist
          command: |
            aws cloudformation deploy \
              --template-file .circleci/files/frontend.yml \
              --tags project=udapeople \
              --stack-name "frontendStack-${CIRCLE_WORKFLOW_ID}" \
              --parameter-overrides ID="${CIRCLE_WORKFLOW_ID}"  
              
      - run:
          name: Add back-end ip to ansible inventory
          command: |
            # Your code here
            echo -e "[all]\n" > ./.circleci/ansible/inventory.txt
            aws ec2 describe-instances \
              --query 'Reservations[*].Instances[*].PublicIpAddress' \
              --filters "Name=tag:Name,Values=backend-${CIRCLE_WORKFLOW_ID}" \
              --output text >> .circleci/ansible/inventory.txt
              
            cat .circleci/ansible/inventory.txt
             
      - persist_to_workspace:
          root: .circleci/ansible/
          paths:
            - inventory.txt
      # Here's where you will add some code to rollback on failure  
  configure-infrastructure:
    docker:
      # Docker image here that supports Ansible
      - image: python:3.7-alpine3.11
    steps:
      # Checkout code from git
      - checkout
      # Add ssh keys with fingerprint
      - add_ssh_keys:
          fingerprints: ["7c:36:23:30:45:1d:a4:3d:20:59:c6:5d:6f:a3:85:bb"]
      # attach workspace
      - attach_workspace:
          at: .circleci/ansible/
      - run:
          name: Install dependencies
          command: |
            # Your code here
            apk add --update ansible
      - run:
          name: Configure server 
          no_output_timeout: 30m
          command: |
            echo ENVIROMENT=production > "backend/.env"
            echo TYPEORM_CONNECTION=postgres >> "backend/.env"
            echo TYPEORM_ENTITIES=./src/modules/domain/**/*.entity.ts >> "backend/.env"
            echo TYPEORM_HOST=$TYPEORM_HOST >> "backend/.env"
            echo TYPEORM_PORT=$TYPEORM_PORT >> "backend/.env"
            echo TYPEORM_USERNAME=$TYPEORM_USERNAME >> "backend/.env"
            echo TYPEORM_PASSWORD=$TYPEORM_PASSWORD >> "backend/.env"
            echo TYPEORM_DATABASE=$TYPEORM_DATABASE >> "backend/.env"
            cat .circleci/ansible/inventory.txt
            ansible-playbook -i .circleci/ansible/inventory.txt .circleci/ansible/configure-server.yml
      # Here's where you will add some code to rollback on failure      

  run-migrations:
    docker:
      # Docker image here that supports NodeJS
      - image: circleci/node:13.8.0
    steps:
      # Checkout code from git
      - checkout
      - run:
          name: Run migrations
          command: |
            # Your code here
            cd backend
            npm i
             # npm audit --audit-level=critical 
            npm audit fix --audit-level=critical --force
            npm run migrations > migrations_results.txt
            cat migrations_results.txt
            
      - run:
          name: Send migration results to memstash
          command: |
            # Your code here
            cd backend
            if grep "has been executed successfully" migrations_results.txt
            then
            curl -H "Content-Type: text/plain" -H "token: ${CIRCLE_WORKFLOW_ID:0:7}" --request PUT --data "1" https://api.memstash.io/values/<< pipeline.id >>_migrations
            else
            curl -H "Content-Type: text/plain" -H "token: ${CIRCLE_WORKFLOW_ID:0:7}" --request PUT --data "0" https://api.memstash.io/values/<< pipeline.id >>_migrations
            fi         
  deploy-frontend:
    docker:
      # Docker image here that supports AWS CLI
      - image: amazon/aws-cli
    steps:
      # Checkout code from git
      - checkout
      - run:
          name: Install dependencies
          command: |
            curl -sL https://rpm.nodesource.com/setup_lts.x | bash -
            yum -y install nodejs
            yum -y install tar gzip
      - run:
          name: Get backend url
          command: |
            # your code here
            export BACKEND_IP=$(aws ec2 describe-instances \
            --query 'Reservations[*].Instances[*].PublicIpAddress' \
            --filters "Name=tag:Name,Values=backend-${CIRCLE_WORKFLOW_ID}" \
            --output text)
            echo $BACKEND_IP > .circleci/ansible/backend_ip
            export API_URL="http://${BACKEND_IP}:3030"
            echo "API_URL=$API_URL" >> frontend/.env
            echo "${API_URL}" 
      - run:
          name: "Baking backend API_URL into the frontend"
          command: |
            npm install webpack-dev-server -g
            cd frontend
            npm i
            npm run build
            npm audit fix --audit-level=critical --force
      - persist_to_workspace:
          root: .circleci/ansible/
          paths:
            - backend_ip
      - run:
          name: Deploy frontend objects
          command: |
            # your code here
            aws s3 cp frontend/dist "s3://udapeople-${CIRCLE_WORKFLOW_ID}" --recursive
      # Here's where you will add some code to rollback on failure      
                  
  deploy-backend:
    docker:
      # Docker image here that supports Ansible
      - image: python:3.7-alpine3.11
    steps:
      # Checkout code from git
      - checkout
      # Add ssh keys with fingerprint
      - add_ssh_keys:
          fingerprints: ["7c:36:23:30:45:1d:a4:3d:20:59:c6:5d:6f:a3:85:bb"]
      # attach workspace
      - attach_workspace:
          at: .circleci/ansible/
      - run:
          name: Install dependencies
          command: |
            apk add --update tar gzip ansible nodejs npm
            pip install awscli
      - run:
          name: Install curl
          command: apk add curl
      
      - run:
          name: Build and deploy backend (remove node modules)
          no_output_timeout: 30m
          command: |
            cd backend
            touch .env
            echo ENVIROMENT=production > ".env"
            echo TYPEORM_CONNECTION=postgres >> ".env"
            echo TYPEORM_MIGRATIONS_DIR=./src/migrations >> ".env"
            echo TYPEORM_ENTITIES=./src/modules/domain/**/*.entity.ts >> ".env"
            echo TYPEORM_MIGRATIONS=./src/migrations/*.ts >> ".env"
            echo TYPEORM_HOST=$TYPEORM_HOST >> ".env"
            echo TYPEORM_PORT=$TYPEORM_PORT >> ".env"
            echo TYPEORM_USERNAME=$TYPEORM_USERNAME >> ".env"
            echo TYPEORM_PASSWORD=$TYPEORM_PASSWORD >> ".env"
            echo TYPEORM_DATABASE=$TYPEORM_DATABASE >> ".env"
            npm i
            npm run build
            echo "List of contents before deleting: "
            ls -a
            echo "----------------------------------------"
            rm -rf node_modules 
            rm -rf dist
            rm -rf test
            rm README.md 
            echo "List of files and dirs that will be sent to ansible: "
            ls -a
            echo "----------------------------------------"
            mkdir -p ../.circleci/ansible/roles/deploy/files
            cd ../.circleci/ansible
            ansible-playbook -i inventory.txt deploy.yml
      - destroy-environment
      - revert-migrations
  smoke-test:
    docker:
      - image: python:3.7-alpine3.11
    steps:
      - checkout
      - run:
          name: Install dependencies
          command: |
            apk add --update curl
            pip3 install awscli
      - attach_workspace:
          at: .circleci/ansible/
      - run:
          name: Get backend url and run smoke test
          command: |
            cd .circleci/ansible
            BACKEND_IP=$(cat backend_ip)
            echo "${BACKEND_IP}"
            curl "https://${BACKEND_IP}:3030/api/status"
            
      - run:
          name: Frontend smoke test.
          command: |
            URL="http://udapeople-${CIRCLE_WORKFLOW_ID}.s3-website-us-west-2.amazonaws.com/#/employees"
            if curl -s ${URL} | grep "Welcome"
            then
              return 0
            else
              return 1
            fi
      #- destroy-environment
      #- revert-migrations 

workflows:
  default:
    jobs:
      - build-frontend
      - build-backend
      - test-frontend:
          requires: [build-frontend]
      - test-backend:
          requires: [build-backend]
      - scan-backend:
          requires: [build-backend]
      - scan-frontend:
          requires: [build-frontend]
      - deploy-infrastructure:
          requires: [test-frontend, test-backend, scan-frontend, scan-backend]
      - configure-infrastructure:
          requires: [deploy-infrastructure]
      - run-migrations:
          requires: [configure-infrastructure]   
      - deploy-frontend:
          requires: [run-migrations]   
      - deploy-backend:
          requires: [run-migrations]  
      - smoke-test:
          requires: [deploy-backend, deploy-frontend]        
      
